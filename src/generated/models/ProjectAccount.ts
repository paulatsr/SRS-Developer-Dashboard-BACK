
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProjectAccount` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model ProjectAccount
 * 
 */
export type ProjectAccountModel = runtime.Types.Result.DefaultSelection<Prisma.$ProjectAccountPayload>

export type AggregateProjectAccount = {
  _count: ProjectAccountCountAggregateOutputType | null
  _min: ProjectAccountMinAggregateOutputType | null
  _max: ProjectAccountMaxAggregateOutputType | null
}

export type ProjectAccountMinAggregateOutputType = {
  id: string | null
  project_id: string | null
  account_id: string | null
  role: string | null
}

export type ProjectAccountMaxAggregateOutputType = {
  id: string | null
  project_id: string | null
  account_id: string | null
  role: string | null
}

export type ProjectAccountCountAggregateOutputType = {
  id: number
  project_id: number
  account_id: number
  role: number
  _all: number
}


export type ProjectAccountMinAggregateInputType = {
  id?: true
  project_id?: true
  account_id?: true
  role?: true
}

export type ProjectAccountMaxAggregateInputType = {
  id?: true
  project_id?: true
  account_id?: true
  role?: true
}

export type ProjectAccountCountAggregateInputType = {
  id?: true
  project_id?: true
  account_id?: true
  role?: true
  _all?: true
}

export type ProjectAccountAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectAccount to aggregate.
   */
  where?: Prisma.ProjectAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectAccounts to fetch.
   */
  orderBy?: Prisma.ProjectAccountOrderByWithRelationInput | Prisma.ProjectAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProjectAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProjectAccounts
  **/
  _count?: true | ProjectAccountCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProjectAccountMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProjectAccountMaxAggregateInputType
}

export type GetProjectAccountAggregateType<T extends ProjectAccountAggregateArgs> = {
      [P in keyof T & keyof AggregateProjectAccount]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProjectAccount[P]>
    : Prisma.GetScalarType<T[P], AggregateProjectAccount[P]>
}




export type ProjectAccountGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectAccountWhereInput
  orderBy?: Prisma.ProjectAccountOrderByWithAggregationInput | Prisma.ProjectAccountOrderByWithAggregationInput[]
  by: Prisma.ProjectAccountScalarFieldEnum[] | Prisma.ProjectAccountScalarFieldEnum
  having?: Prisma.ProjectAccountScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProjectAccountCountAggregateInputType | true
  _min?: ProjectAccountMinAggregateInputType
  _max?: ProjectAccountMaxAggregateInputType
}

export type ProjectAccountGroupByOutputType = {
  id: string
  project_id: string
  account_id: string
  role: string
  _count: ProjectAccountCountAggregateOutputType | null
  _min: ProjectAccountMinAggregateOutputType | null
  _max: ProjectAccountMaxAggregateOutputType | null
}

type GetProjectAccountGroupByPayload<T extends ProjectAccountGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProjectAccountGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProjectAccountGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProjectAccountGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProjectAccountGroupByOutputType[P]>
      }
    >
  >



export type ProjectAccountWhereInput = {
  AND?: Prisma.ProjectAccountWhereInput | Prisma.ProjectAccountWhereInput[]
  OR?: Prisma.ProjectAccountWhereInput[]
  NOT?: Prisma.ProjectAccountWhereInput | Prisma.ProjectAccountWhereInput[]
  id?: Prisma.StringFilter<"ProjectAccount"> | string
  project_id?: Prisma.StringFilter<"ProjectAccount"> | string
  account_id?: Prisma.StringFilter<"ProjectAccount"> | string
  role?: Prisma.StringFilter<"ProjectAccount"> | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  account?: Prisma.XOR<Prisma.AccountScalarRelationFilter, Prisma.AccountWhereInput>
}

export type ProjectAccountOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  project_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  role?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
  account?: Prisma.AccountOrderByWithRelationInput
}

export type ProjectAccountWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  project_id_account_id?: Prisma.ProjectAccountProject_idAccount_idCompoundUniqueInput
  AND?: Prisma.ProjectAccountWhereInput | Prisma.ProjectAccountWhereInput[]
  OR?: Prisma.ProjectAccountWhereInput[]
  NOT?: Prisma.ProjectAccountWhereInput | Prisma.ProjectAccountWhereInput[]
  project_id?: Prisma.StringFilter<"ProjectAccount"> | string
  account_id?: Prisma.StringFilter<"ProjectAccount"> | string
  role?: Prisma.StringFilter<"ProjectAccount"> | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  account?: Prisma.XOR<Prisma.AccountScalarRelationFilter, Prisma.AccountWhereInput>
}, "id" | "project_id_account_id">

export type ProjectAccountOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  project_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  role?: Prisma.SortOrder
  _count?: Prisma.ProjectAccountCountOrderByAggregateInput
  _max?: Prisma.ProjectAccountMaxOrderByAggregateInput
  _min?: Prisma.ProjectAccountMinOrderByAggregateInput
}

export type ProjectAccountScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProjectAccountScalarWhereWithAggregatesInput | Prisma.ProjectAccountScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProjectAccountScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProjectAccountScalarWhereWithAggregatesInput | Prisma.ProjectAccountScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProjectAccount"> | string
  project_id?: Prisma.StringWithAggregatesFilter<"ProjectAccount"> | string
  account_id?: Prisma.StringWithAggregatesFilter<"ProjectAccount"> | string
  role?: Prisma.StringWithAggregatesFilter<"ProjectAccount"> | string
}

export type ProjectAccountCreateInput = {
  id?: string
  role: string
  project: Prisma.ProjectCreateNestedOneWithoutProjectAccountsInput
  account: Prisma.AccountCreateNestedOneWithoutProjectAccountsInput
}

export type ProjectAccountUncheckedCreateInput = {
  id?: string
  project_id: string
  account_id: string
  role: string
}

export type ProjectAccountUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutProjectAccountsNestedInput
  account?: Prisma.AccountUpdateOneRequiredWithoutProjectAccountsNestedInput
}

export type ProjectAccountUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  project_id?: Prisma.StringFieldUpdateOperationsInput | string
  account_id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectAccountCreateManyInput = {
  id?: string
  project_id: string
  account_id: string
  role: string
}

export type ProjectAccountUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectAccountUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  project_id?: Prisma.StringFieldUpdateOperationsInput | string
  account_id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectAccountListRelationFilter = {
  every?: Prisma.ProjectAccountWhereInput
  some?: Prisma.ProjectAccountWhereInput
  none?: Prisma.ProjectAccountWhereInput
}

export type ProjectAccountOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProjectAccountProject_idAccount_idCompoundUniqueInput = {
  project_id: string
  account_id: string
}

export type ProjectAccountCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  project_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type ProjectAccountMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  project_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type ProjectAccountMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  project_id?: Prisma.SortOrder
  account_id?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type ProjectAccountCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProjectAccountCreateWithoutProjectInput, Prisma.ProjectAccountUncheckedCreateWithoutProjectInput> | Prisma.ProjectAccountCreateWithoutProjectInput[] | Prisma.ProjectAccountUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectAccountCreateOrConnectWithoutProjectInput | Prisma.ProjectAccountCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProjectAccountCreateManyProjectInputEnvelope
  connect?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
}

export type ProjectAccountUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProjectAccountCreateWithoutProjectInput, Prisma.ProjectAccountUncheckedCreateWithoutProjectInput> | Prisma.ProjectAccountCreateWithoutProjectInput[] | Prisma.ProjectAccountUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectAccountCreateOrConnectWithoutProjectInput | Prisma.ProjectAccountCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProjectAccountCreateManyProjectInputEnvelope
  connect?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
}

export type ProjectAccountUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectAccountCreateWithoutProjectInput, Prisma.ProjectAccountUncheckedCreateWithoutProjectInput> | Prisma.ProjectAccountCreateWithoutProjectInput[] | Prisma.ProjectAccountUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectAccountCreateOrConnectWithoutProjectInput | Prisma.ProjectAccountCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProjectAccountUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProjectAccountUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProjectAccountCreateManyProjectInputEnvelope
  set?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  disconnect?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  delete?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  connect?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  update?: Prisma.ProjectAccountUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProjectAccountUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProjectAccountUpdateManyWithWhereWithoutProjectInput | Prisma.ProjectAccountUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProjectAccountScalarWhereInput | Prisma.ProjectAccountScalarWhereInput[]
}

export type ProjectAccountUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectAccountCreateWithoutProjectInput, Prisma.ProjectAccountUncheckedCreateWithoutProjectInput> | Prisma.ProjectAccountCreateWithoutProjectInput[] | Prisma.ProjectAccountUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectAccountCreateOrConnectWithoutProjectInput | Prisma.ProjectAccountCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProjectAccountUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProjectAccountUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProjectAccountCreateManyProjectInputEnvelope
  set?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  disconnect?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  delete?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  connect?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  update?: Prisma.ProjectAccountUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProjectAccountUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProjectAccountUpdateManyWithWhereWithoutProjectInput | Prisma.ProjectAccountUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProjectAccountScalarWhereInput | Prisma.ProjectAccountScalarWhereInput[]
}

export type ProjectAccountCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.ProjectAccountCreateWithoutAccountInput, Prisma.ProjectAccountUncheckedCreateWithoutAccountInput> | Prisma.ProjectAccountCreateWithoutAccountInput[] | Prisma.ProjectAccountUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.ProjectAccountCreateOrConnectWithoutAccountInput | Prisma.ProjectAccountCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.ProjectAccountCreateManyAccountInputEnvelope
  connect?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
}

export type ProjectAccountUncheckedCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.ProjectAccountCreateWithoutAccountInput, Prisma.ProjectAccountUncheckedCreateWithoutAccountInput> | Prisma.ProjectAccountCreateWithoutAccountInput[] | Prisma.ProjectAccountUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.ProjectAccountCreateOrConnectWithoutAccountInput | Prisma.ProjectAccountCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.ProjectAccountCreateManyAccountInputEnvelope
  connect?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
}

export type ProjectAccountUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectAccountCreateWithoutAccountInput, Prisma.ProjectAccountUncheckedCreateWithoutAccountInput> | Prisma.ProjectAccountCreateWithoutAccountInput[] | Prisma.ProjectAccountUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.ProjectAccountCreateOrConnectWithoutAccountInput | Prisma.ProjectAccountCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.ProjectAccountUpsertWithWhereUniqueWithoutAccountInput | Prisma.ProjectAccountUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.ProjectAccountCreateManyAccountInputEnvelope
  set?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  disconnect?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  delete?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  connect?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  update?: Prisma.ProjectAccountUpdateWithWhereUniqueWithoutAccountInput | Prisma.ProjectAccountUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.ProjectAccountUpdateManyWithWhereWithoutAccountInput | Prisma.ProjectAccountUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.ProjectAccountScalarWhereInput | Prisma.ProjectAccountScalarWhereInput[]
}

export type ProjectAccountUncheckedUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectAccountCreateWithoutAccountInput, Prisma.ProjectAccountUncheckedCreateWithoutAccountInput> | Prisma.ProjectAccountCreateWithoutAccountInput[] | Prisma.ProjectAccountUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.ProjectAccountCreateOrConnectWithoutAccountInput | Prisma.ProjectAccountCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.ProjectAccountUpsertWithWhereUniqueWithoutAccountInput | Prisma.ProjectAccountUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.ProjectAccountCreateManyAccountInputEnvelope
  set?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  disconnect?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  delete?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  connect?: Prisma.ProjectAccountWhereUniqueInput | Prisma.ProjectAccountWhereUniqueInput[]
  update?: Prisma.ProjectAccountUpdateWithWhereUniqueWithoutAccountInput | Prisma.ProjectAccountUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.ProjectAccountUpdateManyWithWhereWithoutAccountInput | Prisma.ProjectAccountUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.ProjectAccountScalarWhereInput | Prisma.ProjectAccountScalarWhereInput[]
}

export type ProjectAccountCreateWithoutProjectInput = {
  id?: string
  role: string
  account: Prisma.AccountCreateNestedOneWithoutProjectAccountsInput
}

export type ProjectAccountUncheckedCreateWithoutProjectInput = {
  id?: string
  account_id: string
  role: string
}

export type ProjectAccountCreateOrConnectWithoutProjectInput = {
  where: Prisma.ProjectAccountWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectAccountCreateWithoutProjectInput, Prisma.ProjectAccountUncheckedCreateWithoutProjectInput>
}

export type ProjectAccountCreateManyProjectInputEnvelope = {
  data: Prisma.ProjectAccountCreateManyProjectInput | Prisma.ProjectAccountCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type ProjectAccountUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectAccountWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectAccountUpdateWithoutProjectInput, Prisma.ProjectAccountUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.ProjectAccountCreateWithoutProjectInput, Prisma.ProjectAccountUncheckedCreateWithoutProjectInput>
}

export type ProjectAccountUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectAccountWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectAccountUpdateWithoutProjectInput, Prisma.ProjectAccountUncheckedUpdateWithoutProjectInput>
}

export type ProjectAccountUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.ProjectAccountScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectAccountUpdateManyMutationInput, Prisma.ProjectAccountUncheckedUpdateManyWithoutProjectInput>
}

export type ProjectAccountScalarWhereInput = {
  AND?: Prisma.ProjectAccountScalarWhereInput | Prisma.ProjectAccountScalarWhereInput[]
  OR?: Prisma.ProjectAccountScalarWhereInput[]
  NOT?: Prisma.ProjectAccountScalarWhereInput | Prisma.ProjectAccountScalarWhereInput[]
  id?: Prisma.StringFilter<"ProjectAccount"> | string
  project_id?: Prisma.StringFilter<"ProjectAccount"> | string
  account_id?: Prisma.StringFilter<"ProjectAccount"> | string
  role?: Prisma.StringFilter<"ProjectAccount"> | string
}

export type ProjectAccountCreateWithoutAccountInput = {
  id?: string
  role: string
  project: Prisma.ProjectCreateNestedOneWithoutProjectAccountsInput
}

export type ProjectAccountUncheckedCreateWithoutAccountInput = {
  id?: string
  project_id: string
  role: string
}

export type ProjectAccountCreateOrConnectWithoutAccountInput = {
  where: Prisma.ProjectAccountWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectAccountCreateWithoutAccountInput, Prisma.ProjectAccountUncheckedCreateWithoutAccountInput>
}

export type ProjectAccountCreateManyAccountInputEnvelope = {
  data: Prisma.ProjectAccountCreateManyAccountInput | Prisma.ProjectAccountCreateManyAccountInput[]
  skipDuplicates?: boolean
}

export type ProjectAccountUpsertWithWhereUniqueWithoutAccountInput = {
  where: Prisma.ProjectAccountWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectAccountUpdateWithoutAccountInput, Prisma.ProjectAccountUncheckedUpdateWithoutAccountInput>
  create: Prisma.XOR<Prisma.ProjectAccountCreateWithoutAccountInput, Prisma.ProjectAccountUncheckedCreateWithoutAccountInput>
}

export type ProjectAccountUpdateWithWhereUniqueWithoutAccountInput = {
  where: Prisma.ProjectAccountWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectAccountUpdateWithoutAccountInput, Prisma.ProjectAccountUncheckedUpdateWithoutAccountInput>
}

export type ProjectAccountUpdateManyWithWhereWithoutAccountInput = {
  where: Prisma.ProjectAccountScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectAccountUpdateManyMutationInput, Prisma.ProjectAccountUncheckedUpdateManyWithoutAccountInput>
}

export type ProjectAccountCreateManyProjectInput = {
  id?: string
  account_id: string
  role: string
}

export type ProjectAccountUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  account?: Prisma.AccountUpdateOneRequiredWithoutProjectAccountsNestedInput
}

export type ProjectAccountUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  account_id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectAccountUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  account_id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectAccountCreateManyAccountInput = {
  id?: string
  project_id: string
  role: string
}

export type ProjectAccountUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutProjectAccountsNestedInput
}

export type ProjectAccountUncheckedUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  project_id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProjectAccountUncheckedUpdateManyWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  project_id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}



export type ProjectAccountSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  project_id?: boolean
  account_id?: boolean
  role?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectAccount"]>

export type ProjectAccountSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  project_id?: boolean
  account_id?: boolean
  role?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectAccount"]>

export type ProjectAccountSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  project_id?: boolean
  account_id?: boolean
  role?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectAccount"]>

export type ProjectAccountSelectScalar = {
  id?: boolean
  project_id?: boolean
  account_id?: boolean
  role?: boolean
}

export type ProjectAccountOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "project_id" | "account_id" | "role", ExtArgs["result"]["projectAccount"]>
export type ProjectAccountInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}
export type ProjectAccountIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}
export type ProjectAccountIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}

export type $ProjectAccountPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProjectAccount"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
    account: Prisma.$AccountPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    project_id: string
    account_id: string
    role: string
  }, ExtArgs["result"]["projectAccount"]>
  composites: {}
}

export type ProjectAccountGetPayload<S extends boolean | null | undefined | ProjectAccountDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProjectAccountPayload, S>

export type ProjectAccountCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProjectAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProjectAccountCountAggregateInputType | true
  }

export interface ProjectAccountDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectAccount'], meta: { name: 'ProjectAccount' } }
  /**
   * Find zero or one ProjectAccount that matches the filter.
   * @param {ProjectAccountFindUniqueArgs} args - Arguments to find a ProjectAccount
   * @example
   * // Get one ProjectAccount
   * const projectAccount = await prisma.projectAccount.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProjectAccountFindUniqueArgs>(args: Prisma.SelectSubset<T, ProjectAccountFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProjectAccountClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProjectAccount that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProjectAccountFindUniqueOrThrowArgs} args - Arguments to find a ProjectAccount
   * @example
   * // Get one ProjectAccount
   * const projectAccount = await prisma.projectAccount.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProjectAccountFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProjectAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectAccountClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectAccount that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccountFindFirstArgs} args - Arguments to find a ProjectAccount
   * @example
   * // Get one ProjectAccount
   * const projectAccount = await prisma.projectAccount.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProjectAccountFindFirstArgs>(args?: Prisma.SelectSubset<T, ProjectAccountFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProjectAccountClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectAccount that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccountFindFirstOrThrowArgs} args - Arguments to find a ProjectAccount
   * @example
   * // Get one ProjectAccount
   * const projectAccount = await prisma.projectAccount.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProjectAccountFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProjectAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectAccountClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProjectAccounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccountFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProjectAccounts
   * const projectAccounts = await prisma.projectAccount.findMany()
   * 
   * // Get first 10 ProjectAccounts
   * const projectAccounts = await prisma.projectAccount.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const projectAccountWithIdOnly = await prisma.projectAccount.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProjectAccountFindManyArgs>(args?: Prisma.SelectSubset<T, ProjectAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProjectAccount.
   * @param {ProjectAccountCreateArgs} args - Arguments to create a ProjectAccount.
   * @example
   * // Create one ProjectAccount
   * const ProjectAccount = await prisma.projectAccount.create({
   *   data: {
   *     // ... data to create a ProjectAccount
   *   }
   * })
   * 
   */
  create<T extends ProjectAccountCreateArgs>(args: Prisma.SelectSubset<T, ProjectAccountCreateArgs<ExtArgs>>): Prisma.Prisma__ProjectAccountClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProjectAccounts.
   * @param {ProjectAccountCreateManyArgs} args - Arguments to create many ProjectAccounts.
   * @example
   * // Create many ProjectAccounts
   * const projectAccount = await prisma.projectAccount.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProjectAccountCreateManyArgs>(args?: Prisma.SelectSubset<T, ProjectAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProjectAccounts and returns the data saved in the database.
   * @param {ProjectAccountCreateManyAndReturnArgs} args - Arguments to create many ProjectAccounts.
   * @example
   * // Create many ProjectAccounts
   * const projectAccount = await prisma.projectAccount.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProjectAccounts and only return the `id`
   * const projectAccountWithIdOnly = await prisma.projectAccount.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProjectAccountCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProjectAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectAccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProjectAccount.
   * @param {ProjectAccountDeleteArgs} args - Arguments to delete one ProjectAccount.
   * @example
   * // Delete one ProjectAccount
   * const ProjectAccount = await prisma.projectAccount.delete({
   *   where: {
   *     // ... filter to delete one ProjectAccount
   *   }
   * })
   * 
   */
  delete<T extends ProjectAccountDeleteArgs>(args: Prisma.SelectSubset<T, ProjectAccountDeleteArgs<ExtArgs>>): Prisma.Prisma__ProjectAccountClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProjectAccount.
   * @param {ProjectAccountUpdateArgs} args - Arguments to update one ProjectAccount.
   * @example
   * // Update one ProjectAccount
   * const projectAccount = await prisma.projectAccount.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProjectAccountUpdateArgs>(args: Prisma.SelectSubset<T, ProjectAccountUpdateArgs<ExtArgs>>): Prisma.Prisma__ProjectAccountClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProjectAccounts.
   * @param {ProjectAccountDeleteManyArgs} args - Arguments to filter ProjectAccounts to delete.
   * @example
   * // Delete a few ProjectAccounts
   * const { count } = await prisma.projectAccount.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProjectAccountDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProjectAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccountUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProjectAccounts
   * const projectAccount = await prisma.projectAccount.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProjectAccountUpdateManyArgs>(args: Prisma.SelectSubset<T, ProjectAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectAccounts and returns the data updated in the database.
   * @param {ProjectAccountUpdateManyAndReturnArgs} args - Arguments to update many ProjectAccounts.
   * @example
   * // Update many ProjectAccounts
   * const projectAccount = await prisma.projectAccount.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProjectAccounts and only return the `id`
   * const projectAccountWithIdOnly = await prisma.projectAccount.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProjectAccountUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProjectAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectAccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProjectAccount.
   * @param {ProjectAccountUpsertArgs} args - Arguments to update or create a ProjectAccount.
   * @example
   * // Update or create a ProjectAccount
   * const projectAccount = await prisma.projectAccount.upsert({
   *   create: {
   *     // ... data to create a ProjectAccount
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProjectAccount we want to update
   *   }
   * })
   */
  upsert<T extends ProjectAccountUpsertArgs>(args: Prisma.SelectSubset<T, ProjectAccountUpsertArgs<ExtArgs>>): Prisma.Prisma__ProjectAccountClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProjectAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccountCountArgs} args - Arguments to filter ProjectAccounts to count.
   * @example
   * // Count the number of ProjectAccounts
   * const count = await prisma.projectAccount.count({
   *   where: {
   *     // ... the filter for the ProjectAccounts we want to count
   *   }
   * })
  **/
  count<T extends ProjectAccountCountArgs>(
    args?: Prisma.Subset<T, ProjectAccountCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProjectAccountCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProjectAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProjectAccountAggregateArgs>(args: Prisma.Subset<T, ProjectAccountAggregateArgs>): Prisma.PrismaPromise<GetProjectAccountAggregateType<T>>

  /**
   * Group by ProjectAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccountGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProjectAccountGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProjectAccountGroupByArgs['orderBy'] }
      : { orderBy?: ProjectAccountGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProjectAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProjectAccount model
 */
readonly fields: ProjectAccountFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProjectAccount.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectAccountClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  account<T extends Prisma.AccountDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AccountDefaultArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProjectAccount model
 */
export interface ProjectAccountFieldRefs {
  readonly id: Prisma.FieldRef<"ProjectAccount", 'String'>
  readonly project_id: Prisma.FieldRef<"ProjectAccount", 'String'>
  readonly account_id: Prisma.FieldRef<"ProjectAccount", 'String'>
  readonly role: Prisma.FieldRef<"ProjectAccount", 'String'>
}
    

// Custom InputTypes
/**
 * ProjectAccount findUnique
 */
export type ProjectAccountFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccount
   */
  select?: Prisma.ProjectAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccount
   */
  omit?: Prisma.ProjectAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccountInclude<ExtArgs> | null
  /**
   * Filter, which ProjectAccount to fetch.
   */
  where: Prisma.ProjectAccountWhereUniqueInput
}

/**
 * ProjectAccount findUniqueOrThrow
 */
export type ProjectAccountFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccount
   */
  select?: Prisma.ProjectAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccount
   */
  omit?: Prisma.ProjectAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccountInclude<ExtArgs> | null
  /**
   * Filter, which ProjectAccount to fetch.
   */
  where: Prisma.ProjectAccountWhereUniqueInput
}

/**
 * ProjectAccount findFirst
 */
export type ProjectAccountFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccount
   */
  select?: Prisma.ProjectAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccount
   */
  omit?: Prisma.ProjectAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccountInclude<ExtArgs> | null
  /**
   * Filter, which ProjectAccount to fetch.
   */
  where?: Prisma.ProjectAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectAccounts to fetch.
   */
  orderBy?: Prisma.ProjectAccountOrderByWithRelationInput | Prisma.ProjectAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectAccounts.
   */
  cursor?: Prisma.ProjectAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectAccounts.
   */
  distinct?: Prisma.ProjectAccountScalarFieldEnum | Prisma.ProjectAccountScalarFieldEnum[]
}

/**
 * ProjectAccount findFirstOrThrow
 */
export type ProjectAccountFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccount
   */
  select?: Prisma.ProjectAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccount
   */
  omit?: Prisma.ProjectAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccountInclude<ExtArgs> | null
  /**
   * Filter, which ProjectAccount to fetch.
   */
  where?: Prisma.ProjectAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectAccounts to fetch.
   */
  orderBy?: Prisma.ProjectAccountOrderByWithRelationInput | Prisma.ProjectAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectAccounts.
   */
  cursor?: Prisma.ProjectAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectAccounts.
   */
  distinct?: Prisma.ProjectAccountScalarFieldEnum | Prisma.ProjectAccountScalarFieldEnum[]
}

/**
 * ProjectAccount findMany
 */
export type ProjectAccountFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccount
   */
  select?: Prisma.ProjectAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccount
   */
  omit?: Prisma.ProjectAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccountInclude<ExtArgs> | null
  /**
   * Filter, which ProjectAccounts to fetch.
   */
  where?: Prisma.ProjectAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectAccounts to fetch.
   */
  orderBy?: Prisma.ProjectAccountOrderByWithRelationInput | Prisma.ProjectAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProjectAccounts.
   */
  cursor?: Prisma.ProjectAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectAccounts.
   */
  skip?: number
  distinct?: Prisma.ProjectAccountScalarFieldEnum | Prisma.ProjectAccountScalarFieldEnum[]
}

/**
 * ProjectAccount create
 */
export type ProjectAccountCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccount
   */
  select?: Prisma.ProjectAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccount
   */
  omit?: Prisma.ProjectAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccountInclude<ExtArgs> | null
  /**
   * The data needed to create a ProjectAccount.
   */
  data: Prisma.XOR<Prisma.ProjectAccountCreateInput, Prisma.ProjectAccountUncheckedCreateInput>
}

/**
 * ProjectAccount createMany
 */
export type ProjectAccountCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProjectAccounts.
   */
  data: Prisma.ProjectAccountCreateManyInput | Prisma.ProjectAccountCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProjectAccount createManyAndReturn
 */
export type ProjectAccountCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccount
   */
  select?: Prisma.ProjectAccountSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccount
   */
  omit?: Prisma.ProjectAccountOmit<ExtArgs> | null
  /**
   * The data used to create many ProjectAccounts.
   */
  data: Prisma.ProjectAccountCreateManyInput | Prisma.ProjectAccountCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccountIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProjectAccount update
 */
export type ProjectAccountUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccount
   */
  select?: Prisma.ProjectAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccount
   */
  omit?: Prisma.ProjectAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccountInclude<ExtArgs> | null
  /**
   * The data needed to update a ProjectAccount.
   */
  data: Prisma.XOR<Prisma.ProjectAccountUpdateInput, Prisma.ProjectAccountUncheckedUpdateInput>
  /**
   * Choose, which ProjectAccount to update.
   */
  where: Prisma.ProjectAccountWhereUniqueInput
}

/**
 * ProjectAccount updateMany
 */
export type ProjectAccountUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProjectAccounts.
   */
  data: Prisma.XOR<Prisma.ProjectAccountUpdateManyMutationInput, Prisma.ProjectAccountUncheckedUpdateManyInput>
  /**
   * Filter which ProjectAccounts to update
   */
  where?: Prisma.ProjectAccountWhereInput
  /**
   * Limit how many ProjectAccounts to update.
   */
  limit?: number
}

/**
 * ProjectAccount updateManyAndReturn
 */
export type ProjectAccountUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccount
   */
  select?: Prisma.ProjectAccountSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccount
   */
  omit?: Prisma.ProjectAccountOmit<ExtArgs> | null
  /**
   * The data used to update ProjectAccounts.
   */
  data: Prisma.XOR<Prisma.ProjectAccountUpdateManyMutationInput, Prisma.ProjectAccountUncheckedUpdateManyInput>
  /**
   * Filter which ProjectAccounts to update
   */
  where?: Prisma.ProjectAccountWhereInput
  /**
   * Limit how many ProjectAccounts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccountIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProjectAccount upsert
 */
export type ProjectAccountUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccount
   */
  select?: Prisma.ProjectAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccount
   */
  omit?: Prisma.ProjectAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccountInclude<ExtArgs> | null
  /**
   * The filter to search for the ProjectAccount to update in case it exists.
   */
  where: Prisma.ProjectAccountWhereUniqueInput
  /**
   * In case the ProjectAccount found by the `where` argument doesn't exist, create a new ProjectAccount with this data.
   */
  create: Prisma.XOR<Prisma.ProjectAccountCreateInput, Prisma.ProjectAccountUncheckedCreateInput>
  /**
   * In case the ProjectAccount was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProjectAccountUpdateInput, Prisma.ProjectAccountUncheckedUpdateInput>
}

/**
 * ProjectAccount delete
 */
export type ProjectAccountDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccount
   */
  select?: Prisma.ProjectAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccount
   */
  omit?: Prisma.ProjectAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccountInclude<ExtArgs> | null
  /**
   * Filter which ProjectAccount to delete.
   */
  where: Prisma.ProjectAccountWhereUniqueInput
}

/**
 * ProjectAccount deleteMany
 */
export type ProjectAccountDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectAccounts to delete
   */
  where?: Prisma.ProjectAccountWhereInput
  /**
   * Limit how many ProjectAccounts to delete.
   */
  limit?: number
}

/**
 * ProjectAccount without action
 */
export type ProjectAccountDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccount
   */
  select?: Prisma.ProjectAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccount
   */
  omit?: Prisma.ProjectAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccountInclude<ExtArgs> | null
}
